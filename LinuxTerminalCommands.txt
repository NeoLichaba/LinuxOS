3 November 2022
----------------
Linux Terminal Commands
-------------------------

1. Why Master The Command Line

- More control over machine 
- Faster
- Automate many tasks
- Available everywhere
- Required
- Needed for cloud computing

2. World of OS

- Windows OS vs. UNIX OS
- Linux, Android, Chrome, Mac OS X - descendent of UNIX

3. Shells and Bash

- Terminal: Runs a shell
- Shell: Computer interface to an OS
	- Outer layer around OS
	- Takes commands and passes to OS to perform
	- Linux - bash; Mac - ZSH etc.
	- Bash - common


Linux Commands
-------------------------------
- pwd - print working directory
      - tells user of current working directory
- whoami - who am I?
- man - manual; informative;
      - man <command> - provides more information on the command
- q - quit command
- clear - clears all prev commands
	- clear -x 
	- ctrl + l (shortcut)
- Synopsis (in manual) - contains syntax/different options

* List
-----------
- ls - list contents of current directory
- ls <name of file>/ - provide relative path (relative to location) and peek somewhere else
		     - only works if in the particular location 
- ls /home/neo/Documents/ - provide full absolute path to peek into a particular folder
- ls -l - long listing format
- ls -a - includes in your list, files that begin with a .

* Change Directory
-------------------
- cd - change directory; no manual for cd; 
- cd <file name> - change directory to file name
- cd .. - parent directory (back 1 level)
- cd ../../ - change back multiple levels
- cd </home/neo/Documents/> - change to folder giving absolute path
- cd ~/Desktop/ - change directory to home

* Folder Structure
---------------------
- / - root folder
- /home directory - houses Desktop, Documents folder etc.

~ - home directory

* Creating files/folders
-------------------------------
- mkdir - make directory
- mkdir -p <file names> - make nested folders
- touch - creates files
	- mostly uses text editor
	- if file already exists, opens the file in write mode and timestamp of the file is updated

* Removing files
-------------------------------
- rmdir <filename/> - remove directory; works if folder is empty 
- rm -r <filename/> - remove (recursive) directory (with content)
- rm -ri <filename/> - descends into file and actively decide what to keep 
- rm <filename> - removes files/directories; unable to locate folder thus be careful when doing so
- rm -v - remove verbose; lists output of what was deleted
- rm -rv 

- open <filename> - open
- open <directory name> - open
- mv -v <filename> <destination>- move (verbose) file; specify current path and its new path; last path = destination folder
        - how you rename files and folders

* Copy
--------------------------------

- cp <file name> <destination>
- cp -r <filename> <destination> - list of how files are copied

* Reading Files
--------------------------------
- head - output first part of files (default: first 10 files)
- head <filename> - n - n number to be specified
- tail - output last part of files 
- tail <filename> -n - n number to be specified
- tail -f - listens until the 

- date - prints out current date and time

- > - output redirection operator redirects where info should be stored
    - e.g date > <filename>
    - if command run again, contents of the file are updated vs. replaced
    - file does not have to exist to redirect output to it
    - ls - l > <filename> - lists contents and redirect to file
- >> - redirects standard output and then appends to the file
     - ls -l >> <filename> - lists contents and appends to the file

- cat <filename> - entire contents of file printed
		 - concatenates content of multiple files into new file
- cat <filename> <filename> > <filename> - concatenates contents of files to last file
- cat -n - obtain line number within a file

- less <filename> - used to read contents of files, giving you an interactive UI
- Enable you to scroll down via arrow keys
- / <phrase> - search document
- shift + G - end of the file
- shift + g - top of the file

- echo <"argument"> - echos what you have printed out
- echo "argument" > <filename> - argument echoed and redirected into file instead of printing into terminal

- echo "argument" >> <filename> - argument echoed and appended into file instead of printing into terminal

- wc - provides info about a file or inout it receives via pipes
     - counts number of lines, words and bytes in an input
     - wc -l - number of lines

* Piping - Take output of one command and pass it as input to another command
----------------------------------------------------------------------------

- ls - l | wc - list all lines piped to wc
- combine 2 diff files and pipe to wc

- sort <filename> - sorts info in the file alphabetically
	          - case sensitive - uppercase preferred over lowercase
- sort -n nums - sorts numerically
- sort -nr nums - sorts backwards
- sort -un nums - unique numbers printed out 
- cat <filename> <filename> | sort - concatenate files and pipe output to sort
- sort -un nums | wc -l - in the nums file, sort unique values, pipe it over to word count and return count of lines

- uniq - used in conjunction with sort
       - omits duplicated lines

- sort <filename> | uniq - sorts and returns only unique values 
- sort -u <filename> | uniq - d - only duplicates returned
- sort -u <filename> | uniq - u - only non-duplicates returned
- sort -u <filename> | uniq - c - count of duplicates returned
- sort -u <filename> | uniq - c | sort -n - count of duplicates returned and then sort numerically  
- sort -u <filename> | uniq - c | sort -nr - count of duplicates returned and then sort from highest to lowest

* Path Name Expansion
-------------------------------------------------- 
- echo ~ (aka tildy) - ask shell to expand into file
- cd ~ - expand file to home directory
- echo $PATH  - takes value and expands it into long value; gives you long path 
- echo $USER - home directory for User
- echo * - expanded version of *, every path name in current folder
- echo ls -l * .txt - only txt files with content matched
- ? - matches any single character
- echo *.?? - anything * that ends with a . and any 2 characs after . ??

* Expansion using {}
--------------------------
- echo {a,b,c}.txt - create combo of txt files; files expanded first
- touch app {js,html,css,py} - create files - app.js, app.html, app.js, app.py
- echo {1..99} - numbers expanded to provide numers from 1 to 99
- shell intervenes, takes path and expands it into a larger pattern

* Differences btw files
---------------------------

- diff - obtains difference between 2 files
- cp 
- diff <filename> <filename> - line x in <filename> and line x in <filename> difference

- diff -y <filename> <filename> - shows files side by side
- diff -u - files being compared and context 

* Find
------------------------------------------------
- find - find folders matching search pattern
       - give directory where search should occur
- find . - every file nested in desktop
- find . -name '7' - find file with 7 as a name; finds exact value
- find . -name '*7*' - finds file that contains a 7 in its name		
		     - '*7*' - anything before, anything that comes after
- find . -type d - any type of file that's a directory
- find . - type d -name '*E*'
- find . - type d -iname '*E*' - iname - case insensitive
- find . - type d -iname 'E*' - begins with E
- find . - type d -name 'E*' -or -name 'F*' - begins with E or F

- find . -type -exec - specify command with exec
- find . -type f -exec cat {} \;
  - f - front command
  - - exec - comman to be given
  - {} - placeholder; replaced with all files 
  - \; - where file ends

*Grep
-------------------------------

- helps find text inside files
- grep <String/piece of text> file to search in
- grep green <filename> - highlights all times word "green" appeared
- grep -n green <filename> - line number
- grep -nC - 2 lines before and 2 lines after each match
- grep -r <"String">- recursive; tells grep to search recursively in all nested directories as well 
		    - case sensitive
- grep works with regular expressions


* Disk Usage
-----------------------------------
- du - find sizes of files 
- du -g - gigs
- du -m - megabytes
- du -h | sort - biggest file and pipe to sort
- du -h | sort -h - human readable sort
- du -h | sort -h -tail - largest file

* df (Disk Usage information)
--------------------------------------

- df - disk free

* History
--------------------------------------
- history - all commands run in terminal
- history !<line number> - command at line number
- history | grep 'cookie'

*PS
----------------------------------------

- helps views processes running on computer
- ps
- ps ax: - all processes running on computer by all users
- id provided by process
- provide grep with ps command

* Top
--------------------------------------------
- top most memory intensive processes
- top -o mem - sort by memory

* Kill
------------------------------------------

- killing processes
- kill -l - list signals you can send
- kill <PID> - kill process ID
- ps a - identify which process you want to kill
- kill -9 <PID> - pulls the plug
- killall - sends signal to multiple process at once
- killall <name> - name of process to be killed provided

- jobs - check processes running 
- bg <number> - background
- fg <number> - foreground
- ctrl + z - pauses command
- sleep <# of secs> -  delays job by number of seconds

* Compressing files
------------------------------------------------
- gzip - compresses files



 
